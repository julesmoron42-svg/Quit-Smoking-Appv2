import { supabase } from './supabase';
import { getCurrentUserId } from './storage';

// Script de test pour v√©rifier que l'email est utilis√© comme user ID
export const testEmailIdConfiguration = async () => {
  console.log('üß™ Test de la configuration Email ID...');
  
  try {
    // 1. V√©rifier la session actuelle
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erreur de session:', sessionError);
      return false;
    }
    
    if (!session?.user) {
      console.log('‚ö†Ô∏è Aucun utilisateur connect√©');
      return false;
    }
    
    console.log('‚úÖ Session r√©cup√©r√©e');
    console.log('üìß Email utilisateur:', session.user.email);
    console.log('üÜî UUID utilisateur:', session.user.id);
    
    // 2. Tester getCurrentUserId
    const userId = await getCurrentUserId();
    console.log('üîç getCurrentUserId() retourne:', userId);
    
    if (userId !== session.user.email) {
      console.error('‚ùå getCurrentUserId() ne retourne pas l\'email');
      return false;
    }
    
    console.log('‚úÖ getCurrentUserId() fonctionne correctement');
    
    // 3. Tester l'acc√®s aux donn√©es avec l'email
    if (userId) {
      // Tester l'acc√®s au profil utilisateur
      const { data: profile, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', userId)
        .single();
      
      if (profileError && profileError.code !== 'PGRST116') {
        console.error('‚ùå Erreur acc√®s profil:', profileError);
        return false;
      }
      
      console.log('‚úÖ Acc√®s au profil utilisateur r√©ussi');
      
      // Tester l'acc√®s aux param√®tres
      const { data: settings, error: settingsError } = await supabase
        .from('user_settings')
        .select('*')
        .eq('user_id', userId)
        .single();
      
      if (settingsError && settingsError.code !== 'PGRST116') {
        console.error('‚ùå Erreur acc√®s param√®tres:', settingsError);
        return false;
      }
      
      console.log('‚úÖ Acc√®s aux param√®tres utilisateur r√©ussi');
    }
    
    // 4. Tester les politiques RLS
    console.log('üîí Test des politiques RLS...');
    
    // Essayer d'acc√©der aux donn√©es d'un autre utilisateur (devrait √©chouer)
    const { data: otherUserData, error: otherUserError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', 'autre@email.com')
      .single();
    
    if (otherUserError && otherUserError.code === 'PGRST116') {
      console.log('‚úÖ Politiques RLS fonctionnent (acc√®s refus√© aux autres utilisateurs)');
    } else if (otherUserData) {
      console.error('‚ùå Probl√®me de s√©curit√© : acc√®s aux donn√©es d\'un autre utilisateur');
      return false;
    }
    
    console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('üìã R√©sum√© :');
    console.log('   - Email utilis√© comme user ID:', userId);
    console.log('   - Acc√®s aux donn√©es utilisateur : OK');
    console.log('   - Politiques RLS : OK');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    return false;
  }
};

// Fonction pour tester la cr√©ation d'un profil avec l'email
export const testCreateProfileWithEmail = async () => {
  console.log('üß™ Test de cr√©ation de profil avec email...');
  
  try {
    const userId = await getCurrentUserId();
    
    if (!userId) {
      console.log('‚ö†Ô∏è Aucun utilisateur connect√©');
      return false;
    }
    
    // Cr√©er un profil de test
    const testProfile = {
      id: userId, // Utiliser l'email comme ID
      started_smoking_years: 5,
      cigs_per_day: 20,
      objective_type: 'complete',
      onboarding_completed: true,
    };
    
    const { data, error } = await supabase
      .from('user_profiles')
      .upsert(testProfile)
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Erreur cr√©ation profil:', error);
      return false;
    }
    
    console.log('‚úÖ Profil cr√©√© avec succ√®s');
    console.log('üìä Donn√©es du profil:', data);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de cr√©ation:', error);
    return false;
  }
};

// Fonction pour nettoyer les donn√©es de test
export const cleanupTestData = async () => {
  console.log('üßπ Nettoyage des donn√©es de test...');
  
  try {
    const userId = await getCurrentUserId();
    
    if (!userId) {
      console.log('‚ö†Ô∏è Aucun utilisateur connect√©');
      return false;
    }
    
    // Supprimer le profil de test
    const { error } = await supabase
      .from('user_profiles')
      .delete()
      .eq('id', userId);
    
    if (error) {
      console.error('‚ùå Erreur suppression profil:', error);
      return false;
    }
    
    console.log('‚úÖ Donn√©es de test nettoy√©es');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
    return false;
  }
};
