import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Configuration des notifications pour iOS
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowBanner: true,
    shouldShowList: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

// Configuration sp√©cifique pour iOS
if (Platform.OS === 'ios') {
  Notifications.setNotificationChannelAsync('default', {
    name: 'Notifications par d√©faut',
    importance: Notifications.AndroidImportance.MAX,
    vibrationPattern: [0, 250, 250, 250],
    lightColor: '#FF231F7C',
  });
}

// Interface pour les donn√©es de notification
export interface NotificationData {
  type: 'daily_reminder' | 'test';
  action?: 'open_daily_entry';
}

export interface NotificationSettings {
  enabled: boolean;
  dailyReminderTime: string; // Format HH:mm
  lastPermissionRequested?: string; // Date ISO
  scheduledNotificationIds?: string[]; // IDs des notifications programm√©es
}

const NOTIFICATION_SETTINGS_KEY = 'notification_settings';

export class NotificationService {
  private static instance: NotificationService;
  private settings: NotificationSettings = {
    enabled: false,
      dailyReminderTime: '21:00',
    scheduledNotificationIds: [],
  };

  private constructor() {}

  public static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  /**
   * Demande l'autorisation pour les notifications
   */
  public async requestPermission(): Promise<boolean> {
    try {
      console.log('üîî Demande d\'autorisation pour les notifications...');
      
      // V√©rifier si l'autorisation a d√©j√† √©t√© demand√©e r√©cemment (dans les 7 derniers jours)
      const lastRequested = this.settings.lastPermissionRequested;
      if (lastRequested) {
        const lastRequestDate = new Date(lastRequested);
        const now = new Date();
        const daysDiff = (now.getTime() - lastRequestDate.getTime()) / (1000 * 60 * 60 * 24);
        
        if (daysDiff < 7) {
          console.log('üîî Autorisation d√©j√† demand√©e r√©cemment, skip...');
          return false;
        }
      }

      // Demander l'autorisation
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      // Marquer que l'autorisation a √©t√© demand√©e
      this.settings.lastPermissionRequested = new Date().toISOString();
      await this.saveSettings();

      const granted = finalStatus === 'granted';
      
      if (granted) {
        console.log('‚úÖ Autorisation accord√©e pour les notifications');
        this.settings.enabled = true;
        await this.saveSettings();
        
        // Programmer la notification quotidienne
        await this.scheduleDailyNotification();
      } else {
        console.log('‚ùå Autorisation refus√©e pour les notifications');
      }

      return granted;
    } catch (error) {
      console.error('‚ùå Erreur lors de la demande d\'autorisation:', error);
      return false;
    }
  }

  /**
   * V√©rifie si les notifications sont autoris√©es
   */
  public async checkPermission(): Promise<boolean> {
    try {
      const { status } = await Notifications.getPermissionsAsync();
      return status === 'granted';
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification des permissions:', error);
      return false;
    }
  }

  /**
   * G√©n√®re un message de notification al√©atoire
   */
  private getRandomDailyMessage(): { title: string; body: string } {
    const messages = [
      {
        title: "üéØ Mission quotidienne accomplie ?",
        body: "Alors, as-tu r√©ussi ta mission du jour ? Viens me raconter tes victoires, m√™me les petites ! üèÜ"
      },
      {
        title: "‚ö° D√©fi quotidien relev√© ?",
        body: "Alors champion, as-tu relev√© le d√©fi du jour ? Raconte-moi tes exploits ! üí™"
      },
      {
        title: "üåü Succ√®s du jour √† partager ?",
        body: "Champion, quels sont tes succ√®s d'aujourd'hui ? M√™me les plus petits comptent √©norm√©ment ! üèÖ"
      }
    ];

    // Choisir un message al√©atoire
    const randomIndex = Math.floor(Math.random() * messages.length);
    return messages[randomIndex];
  }

  /**
   * Programme la notification quotidienne
   */
  public async scheduleDailyNotification(): Promise<void> {
    try {
      // Annuler les notifications existantes
      await Notifications.cancelAllScheduledNotificationsAsync();

      if (!this.settings.enabled) {
        console.log('üîî Notifications d√©sactiv√©es, pas de programmation');
        return;
      }

      // V√©rifier les permissions
      const hasPermission = await this.checkPermission();
      if (!hasPermission) {
        console.log('‚ùå Pas d\'autorisation pour programmer les notifications');
        return;
      }

      // Extraire l'heure et les minutes
      const [hours, minutes] = this.settings.dailyReminderTime.split(':').map(Number);
      
      console.log(`üîî Programmation de la notification pour ${hours}:${minutes.toString().padStart(2, '0')}`);

      // G√©n√©rer un message al√©atoire
      const randomMessage = this.getRandomDailyMessage();

      // Calculer la prochaine occurrence
      const now = new Date();
      const nextNotification = new Date();
      nextNotification.setHours(hours, minutes, 0, 0);
      
      // Si l'heure est d√©j√† pass√©e aujourd'hui, programmer pour demain
      if (nextNotification <= now) {
        nextNotification.setDate(nextNotification.getDate() + 1);
      }
      
      // S'assurer que la notification est programm√©e au moins 15 minutes dans le futur
      // pour √©viter les notifications imm√©diates accidentelles
      const timeDiff = nextNotification.getTime() - now.getTime();
      if (timeDiff < 900000) { // Moins de 15 minutes
        nextNotification.setMinutes(nextNotification.getMinutes() + 15);
        console.log(`‚è∞ Notification reprogramm√©e pour √©viter une notification imm√©diate (au moins 15 minutes dans le futur)`);
      }
      
      console.log(`üïê Prochaine notification programm√©e pour: ${nextNotification.toLocaleString()}`);


      // Programmer la vraie notification quotidienne
      // Utiliser le m√™me format pour toutes les plateformes pour √©viter les notifications imm√©diates
      const triggerConfig = {
        seconds: Math.max(1, Math.floor((nextNotification.getTime() - now.getTime()) / 1000)),
        repeats: false,
      };

      console.log(`üì± Format de trigger pour ${Platform.OS}:`, triggerConfig);

      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: randomMessage.title,
          body: randomMessage.body,
          sound: 'default',
          priority: Notifications.AndroidNotificationPriority.HIGH,
          data: {
            type: 'daily_reminder',
            action: 'open_daily_entry'
          } as NotificationData,
        },
        trigger: triggerConfig,
      });

      console.log(`‚úÖ Notification quotidienne programm√©e avec ID: ${notificationId} √† ${this.settings.dailyReminderTime}`);
      
      // Stocker l'ID de la notification
      this.settings.scheduledNotificationIds = [notificationId];
      await this.saveSettings();
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la programmation des notifications:', error);
    }
  }

  /**
   * Configure l'heure de la notification quotidienne
   */
  public async setDailyReminderTime(time: string): Promise<void> {
    this.settings.dailyReminderTime = time;
    await this.saveSettings();
    
    // Programmer automatiquement si les notifications sont activ√©es
    if (this.settings.enabled) {
      await this.scheduleDailyNotification();
      console.log(`‚è∞ Heure mise √† jour et notification reprogramm√©e pour ${time}`);
    } else {
      console.log(`‚è∞ Heure mise √† jour vers ${time} (notifications d√©sactiv√©es)`);
    }
  }


  /**
   * Active ou d√©sactive les notifications
   */
  public async setNotificationsEnabled(enabled: boolean): Promise<void> {
    this.settings.enabled = enabled;
    await this.saveSettings();
    
    if (enabled) {
      // Programmer automatiquement la notification quand on active
      await this.scheduleDailyNotification();
      console.log(`üîî Notifications activ√©es et programm√©es pour ${this.settings.dailyReminderTime}`);
    } else {
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log(`üîî Notifications d√©sactiv√©es et annul√©es`);
    }
  }

  /**
   * Charge les param√®tres depuis AsyncStorage
   */
  private async loadSettings(): Promise<void> {
    try {
      const stored = await AsyncStorage.getItem(NOTIFICATION_SETTINGS_KEY);
      if (stored) {
        this.settings = { ...this.settings, ...JSON.parse(stored) };
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des param√®tres de notification:', error);
    }
  }

  /**
   * Sauvegarde les param√®tres dans AsyncStorage
   */
  private async saveSettings(): Promise<void> {
    try {
      await AsyncStorage.setItem(NOTIFICATION_SETTINGS_KEY, JSON.stringify(this.settings));
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde des param√®tres de notification:', error);
    }
  }

  /**
   * Callback pour g√©rer les clics sur les notifications
   */
  private onNotificationResponse: ((notification: Notifications.NotificationResponse) => void) | null = null;

  /**
   * D√©finit le callback pour g√©rer les clics sur les notifications
   */
  public setNotificationResponseHandler(callback: (notification: Notifications.NotificationResponse) => void): void {
    this.onNotificationResponse = callback;
    
    // √âcouter les r√©ponses aux notifications
    Notifications.addNotificationResponseReceivedListener((response) => {
      if (this.onNotificationResponse) {
        this.onNotificationResponse(response);
      }
    });
  }

  /**
   * Initialise le service de notifications
   */
  public async initialize(): Promise<void> {
    await this.loadSettings();
    
    // Ne pas programmer automatiquement au d√©marrage
    // pour √©viter les notifications ind√©sirables
    console.log(`üîî Service de notifications initialis√© (heure configur√©e: ${this.settings.dailyReminderTime})`);
    console.log(`üí° Les notifications seront programm√©es uniquement sur demande explicite`);
  }

  /**
   * Obtient les param√®tres actuels
   */
  public getSettings(): NotificationSettings {
    return { ...this.settings };
  }

  /**
   * Annule toutes les notifications programm√©es
   */
  public async cancelAllNotifications(): Promise<void> {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
      
      // Nettoyer nos IDs stock√©s localement
      this.settings.scheduledNotificationIds = [];
      await this.saveSettings();
      
      console.log('‚úÖ Toutes les notifications ont √©t√© annul√©es');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'annulation des notifications:', error);
    }
  }
}

// Instance singleton
export const notificationService = NotificationService.getInstance();
